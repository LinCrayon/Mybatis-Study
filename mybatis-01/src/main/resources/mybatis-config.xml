<?xml version="1.0" encoding="UTF8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--导入properties文件-->
    <properties resource="db.properties">
        <property name="username" value="root"/>
        <property name="password" value="password"/>
    </properties>

    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>


    <!--配置别名,注意顺序-->
    <typeAliases>
        <typeAlias type="com.lsq.pojo.User" alias="User"/>
   <!-- <package name="com.lsq.pojo"/>-->
    </typeAliases>


    <environments default="development">
    <environment id="development">
        <transactionManager type="JDBC"/>
     <dataSource type="POOLED">      <!--type="[UNPOOLED|POOLED|JNDI]"）-->
            <property name="driver" value="${driver}"/>
            <property name="url" value="${url}"/>
            <property name="username" value="${username}"/>
            <property name="password" value="${password}"/>
        </dataSource>
    </environment>
</environments>

    <mappers>
        <mapper resource="com/lsq/dao/UserMapper.xml"/>
    </mappers>



</configuration>


<!--    有三种内建的数据源类型-->

<!--    type="[UNPOOLED|POOLED|JNDI]"）-->
<!--    unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。-->
<!--    pooled：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。-->
<!--    jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。-->





<!--    configuration（配置）       -->
<!--    properties（属性）          -->
<!--    settings（设置）            -->
<!--    typeAliases（类型别名）       -->
<!--    typeHandlers（类型处理器）     -->
<!--    objectFactory（对象工厂）     -->
<!--    plugins（插件）                -->
<!--    environments（环境配置）          -->
<!--    environment（环境变量）           -->
<!--    transactionManager（事务管理器）       -->
<!--    dataSource（数据源）                 -->
<!--    databaseIdProvider（数据库厂商标识）     -->
<!--    mappers（映射器）                         ->
<!- 注意元素节点的顺序！顺序不对会报错               -->